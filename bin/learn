#!/usr/bin/env python3

import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from prediction import Baseline
from prediction import Comparator
from prediction import Config
from prediction import Input
from prediction import Learner
from prediction import Manager
from prediction import Random
from prediction import support
import argparse
import json

def main(config):
    support.loggalize()
    Random.initialize(config.seed)
    compatator = Comparator()
    input = Input(config.input)
    path = config.output.get('path', support.default_output())
    config.output.path = os.path.join(path, 'baseline')
    baseline = Baseline(input, config)
    compatator.run(baseline, 'validation')
    config.output.path = os.path.join(path, 'learner')
    learner = Learner(input, config)
    manager = Manager(config.manager)
    while True:
        learner.run_train()
        if manager.should_backup(learner.state):
            learner.run_backup()
        if manager.should_validate(learner.state):
            learner.run_validation()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', required=True)
    parser.add_argument('--input')
    parser.add_argument('--output')
    arguments = parser.parse_args()
    config = Config(json.loads(open(arguments.config).read()))
    if arguments.input is not None:
        config.input.path = arguments.input
    if arguments.output is not None:
        config.output.path = arguments.output
    main(config)
