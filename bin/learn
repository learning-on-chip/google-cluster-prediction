#!/usr/bin/env python3

import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from prediction import Config
from prediction import Input
from prediction import Learner
from prediction import Random
from prediction import Session
from prediction import support
import argparse

def main(config):
    path = config.output.get('path', support.default_output())
    support.loggalize(os.path.join(path, 'log.txt'))
    Random.initialize(config.seed)
    input = Input(config.input)
    config.output.path = os.path.join(path, 'reference')
    learner = Learner(config.learner.reference)
    session = Session(input, learner, config)
    session.run_comparison('validation')
    session.run_comparison('testing')
    config.output.path = os.path.join(path, 'candidate')
    learner = Learner(config.learner.candidate)
    session = Session(input, learner, config)
    while True:
        try:
            while True:
                session.run_training()
                if session.step % config.save_each == 0:
                    session.run_saving()
                if session.step % config.validate_each == 0:
                    session.run_validation()
        except KeyboardInterrupt:
            print()
        i = support.prompt('Abort', 'Continue training',
                           'Stop training and start testing')
        if i == 0:
            return
        elif i == 1:
            continue
        elif i == 2:
            session.run_comparison('validation')
            session.run_comparison('testing')
            return

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', required=True)
    parser.add_argument('--input')
    parser.add_argument('--output')
    arguments = parser.parse_args()
    config = Config.load(arguments.config)
    if arguments.input is not None:
        config.input.path = arguments.input
    if arguments.output is not None:
        config.output.path = arguments.output
    main(config)
